{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pygeoapi is a Python server implementation of the OGC API suite of standards . The project emerged as part of the next generation OGC API efforts in 2018 and provides the capability for organizations to deploy a RESTful OGC API endpoint using OpenAPI, GeoJSON, and HTML. pygeoapi is open source and released under an MIT license . Install in 5 minutes # Python 3.10 required python3 -m venv pygeoapi cd pygeoapi . bin/activate git clone https://github.com/geopython/pygeoapi.git cd pygeoapi pip3 install -r requirements.txt python3 setup.py install cp pygeoapi-config.yml example-config.yml vi example-config.yml # edit as required export PYGEOAPI_CONFIG=example-config.yml export PYGEOAPI_OPENAPI=example-openapi.yml pygeoapi openapi generate $PYGEOAPI_CONFIG --output-file $PYGEOAPI_OPENAPI pygeoapi serve # in another terminal curl http://localhost:5000 # or open in a web browser Features At a glance: Easy to install: install a full implementation via pip or git Easy to deploy: via UbuntuGIS or the official Docker image Flexible: built on a robust plugin framework connect to custom data sources (files, services, databases, etc.) serve custom output formats implement custom processes and workflows deploy via Flask, Django, or any Python framework OGC Compliant: pygeoapi is certified OGC Compliant and an OGC Reference Implementation","title":"Home"},{"location":"#install-in-5-minutes","text":"# Python 3.10 required python3 -m venv pygeoapi cd pygeoapi . bin/activate git clone https://github.com/geopython/pygeoapi.git cd pygeoapi pip3 install -r requirements.txt python3 setup.py install cp pygeoapi-config.yml example-config.yml vi example-config.yml # edit as required export PYGEOAPI_CONFIG=example-config.yml export PYGEOAPI_OPENAPI=example-openapi.yml pygeoapi openapi generate $PYGEOAPI_CONFIG --output-file $PYGEOAPI_OPENAPI pygeoapi serve # in another terminal curl http://localhost:5000 # or open in a web browser","title":"Install in 5 minutes"},{"location":"#features","text":"At a glance: Easy to install: install a full implementation via pip or git Easy to deploy: via UbuntuGIS or the official Docker image Flexible: built on a robust plugin framework connect to custom data sources (files, services, databases, etc.) serve custom output formats implement custom processes and workflows deploy via Flask, Django, or any Python framework OGC Compliant: pygeoapi is certified OGC Compliant and an OGC Reference Implementation","title":"Features"},{"location":"documentation/","text":"Documentation Docs Current release Latest (master) Presentations","title":"Documentation"},{"location":"documentation/#documentation","text":"","title":"Documentation"},{"location":"documentation/#docs","text":"Current release Latest (master) Presentations","title":"Docs"},{"location":"download/","text":"Download Current Stable Release (0.21.0) zip tar.gz All Releases Source Code Git PyPI https://pypi.python.org/pypi/pygeoapi Packages UbuntuGIS pygeoapi exists as a UbuntuGIS package in Launchpad Docker DockerHub","title":"Download"},{"location":"download/#download","text":"Current Stable Release (0.21.0) zip tar.gz All Releases","title":"Download"},{"location":"download/#source-code","text":"Git","title":"Source Code"},{"location":"download/#pypi","text":"https://pypi.python.org/pypi/pygeoapi","title":"PyPI"},{"location":"download/#packages","text":"","title":"Packages"},{"location":"download/#ubuntugis","text":"pygeoapi exists as a UbuntuGIS package in Launchpad","title":"UbuntuGIS"},{"location":"download/#docker","text":"DockerHub","title":"Docker"},{"location":"community/","text":"Community Code of Conduct In support of an inclusive and welcoming community, the pygeoapi code of conduct can always be found at https://github.com/geopython/pygeoapi/blob/master/CODE_OF_CONDUCT.md . There are numerous ways to interact with the pygeoapi community. Mailing List The pygeoapi mailing list enables users and developers to exchange ideas, discuss improvements / issues, and ask questions. To subscribe, visit https://lists.osgeo.org/mailman/listinfo/pygeoapi . Mailing list archives are available at https://lists.osgeo.org/pipermail/pygeoapi . GitHub Discussions pygeoapi also provides GitHub Discussions as a collaborative community space for general questions, ideas, and more. Chat pygeoapi provides open communication in real-time, and provides chat via Gitter, Slack, or IRC (note: connecting via either Gitter or Slack or IRC plugs you in to the same chat). PSC discussions, meetings and user discussion can typically be found in pygeoapi's chat. Gitter Gitter provides a web-based instant messaging and chatroom. The pygeoapi Gitter chatroom is public and open to anyone. Slack The OSGeo Slack is provided at https://osgeo.slack.com/pygeoapi . IRC The pygeoapi IRC can be found at irc://irc.freenode.net#pygeoapi . For those wishing only to follow repository changes/updates, the pygeoapi-activity IRC can be found at irc://irc.freenode.net#pygeoapi-activity . Twitter The official pygeoapi Twitter handle is at https://twitter.com/pygeoapi . Mastodon The official pygeoapi Mastodon handle is at https://noc.social/@pygeoapi . Stack Overflow pygeoapi discussions on Stack Overflow can be found with the pygeoapi tag. Service Providers pygeoapi service providers (core development, support, training) can be found on the Service Providers page . Service providers are also listed on the OSGeo Service Provider Directory . Swag pygeoapi swag (t-shirts, hoodies, stickers, etc.) are available and can be purchased via the OSGeo Redbubble shop . GitHub (Wiki, Issues, Code) The pygeoapi wiki provides an area for supporting information that frequently changes and / or is outside the scope of the formal documentation. The pygeoapi issue tracker is the place to report bugs or request enhancements. To submit a bug be sure to specify the version you are using, the appropriate component, a description of how to reproduce the bug, as well as what version of Python and platform. GitHub provides the ability for users to issue Pull Requests , and is the preferred way to have your contributions added to pygeoapi, although patches and other mechanisms are welcome as well. All pygeoapi source code is managed on GitHub, which includes the latest ( master ) and other supported branches. Security issues If you encounter a security vulnerability in pygeoapi please report as per our Security Policy Getting Involved Users, developers and others are more than welcome! There are plenty of ways to get involved: Documentation Fixing bugs Testing Core development (bug fixing, feature implementation, etc.) See https://github.com/geopython/pygeoapi/blob/master/CONTRIBUTING.md for more information on contributing.","title":"Community"},{"location":"community/#community","text":"","title":"Community"},{"location":"community/#code-of-conduct","text":"In support of an inclusive and welcoming community, the pygeoapi code of conduct can always be found at https://github.com/geopython/pygeoapi/blob/master/CODE_OF_CONDUCT.md . There are numerous ways to interact with the pygeoapi community.","title":"Code of Conduct"},{"location":"community/#mailing-list","text":"The pygeoapi mailing list enables users and developers to exchange ideas, discuss improvements / issues, and ask questions. To subscribe, visit https://lists.osgeo.org/mailman/listinfo/pygeoapi . Mailing list archives are available at https://lists.osgeo.org/pipermail/pygeoapi .","title":"Mailing List"},{"location":"community/#github-discussions","text":"pygeoapi also provides GitHub Discussions as a collaborative community space for general questions, ideas, and more.","title":"GitHub Discussions"},{"location":"community/#chat","text":"pygeoapi provides open communication in real-time, and provides chat via Gitter, Slack, or IRC (note: connecting via either Gitter or Slack or IRC plugs you in to the same chat). PSC discussions, meetings and user discussion can typically be found in pygeoapi's chat.","title":"Chat"},{"location":"community/#gitter","text":"Gitter provides a web-based instant messaging and chatroom. The pygeoapi Gitter chatroom is public and open to anyone.","title":"Gitter"},{"location":"community/#slack","text":"The OSGeo Slack is provided at https://osgeo.slack.com/pygeoapi .","title":"Slack"},{"location":"community/#irc","text":"The pygeoapi IRC can be found at irc://irc.freenode.net#pygeoapi . For those wishing only to follow repository changes/updates, the pygeoapi-activity IRC can be found at irc://irc.freenode.net#pygeoapi-activity .","title":"IRC"},{"location":"community/#twitter","text":"The official pygeoapi Twitter handle is at https://twitter.com/pygeoapi .","title":"Twitter"},{"location":"community/#mastodon","text":"The official pygeoapi Mastodon handle is at https://noc.social/@pygeoapi .","title":"Mastodon"},{"location":"community/#stack-overflow","text":"pygeoapi discussions on Stack Overflow can be found with the pygeoapi tag.","title":"Stack Overflow"},{"location":"community/#service-providers","text":"pygeoapi service providers (core development, support, training) can be found on the Service Providers page . Service providers are also listed on the OSGeo Service Provider Directory .","title":"Service Providers"},{"location":"community/#swag","text":"pygeoapi swag (t-shirts, hoodies, stickers, etc.) are available and can be purchased via the OSGeo Redbubble shop .","title":"Swag"},{"location":"community/#github-wiki-issues-code","text":"The pygeoapi wiki provides an area for supporting information that frequently changes and / or is outside the scope of the formal documentation. The pygeoapi issue tracker is the place to report bugs or request enhancements. To submit a bug be sure to specify the version you are using, the appropriate component, a description of how to reproduce the bug, as well as what version of Python and platform. GitHub provides the ability for users to issue Pull Requests , and is the preferred way to have your contributions added to pygeoapi, although patches and other mechanisms are welcome as well. All pygeoapi source code is managed on GitHub, which includes the latest ( master ) and other supported branches.","title":"GitHub (Wiki, Issues, Code)"},{"location":"community/#security-issues","text":"If you encounter a security vulnerability in pygeoapi please report as per our Security Policy","title":"Security issues"},{"location":"community/#getting-involved","text":"Users, developers and others are more than welcome! There are plenty of ways to get involved: Documentation Fixing bugs Testing Core development (bug fixing, feature implementation, etc.) See https://github.com/geopython/pygeoapi/blob/master/CONTRIBUTING.md for more information on contributing.","title":"Getting Involved"},{"location":"community/psc/","text":"Project Steering Committee In accordance with RFC1 , the authoritative and current PSC membership list is maintained at https://pygeoapi.io/community/psc PSC Meetings PSC meetings are managed on the pygeoapi wiki . Members (in alphabetical order) Francesco Bartoli Just van den Broecke Paul van Genuchten Jorge Samuel Mendes de Jesus Tom Kralidis (Chair) Angelos Tzotsos","title":"Project Steering Committee"},{"location":"community/psc/#project-steering-committee","text":"In accordance with RFC1 , the authoritative and current PSC membership list is maintained at https://pygeoapi.io/community/psc","title":"Project Steering Committee"},{"location":"community/psc/#psc-meetings","text":"PSC meetings are managed on the pygeoapi wiki .","title":"PSC Meetings"},{"location":"community/psc/#members-in-alphabetical-order","text":"Francesco Bartoli Just van den Broecke Paul van Genuchten Jorge Samuel Mendes de Jesus Tom Kralidis (Chair) Angelos Tzotsos","title":"Members (in alphabetical order)"},{"location":"community/service-providers/","text":"Service Providers pygeoapi is developed and supported by a number of businesses, organizations and individuals around the world. Using a service provider is a great way to get started with pygeoapi and contributes to the ongoing sustainability of the project. Services include (but are not limited to): training setup/installation/deployment custom integration bug fixing features/enhancements core development maintenance/packaging/distribution documentation The section below provides a list of service providers who can help you in getting the best out of your pygeoapi investment. The list is randomized on each page load. If you are a service provider and would like to be listed on this page, please feel free to add yourself to the service provider list . Center for Geospatial Solutions The Center for Geospatial Solutions works to ensure that organizations of all sizes have access to data and advanced technologies to improve decision-making for land and water conservation, climate action, and social equity. We develop geospatial data tools and infrastructure that leverage linked data principles and international standards like OGC API. We also provide training, deployment, feature development, and operational services for organizations wishing to adopt pygeoapi as part of their spatial data infrastructure. EOX IT Services GmbH EOX IT Services GmbH (Austria) offers solutions and services in the geodata domain in general and in the Earth Observation domain in particular. EOX is strongly committed towards utilizing and contributing to Open Source Software for example by adapting pygeoapi for Kubernetes-based cloud environments . EOX furthermore provides managed compute and storage resources in the EOxHub Workspace. Geobeyond Srl Geobeyond Srl (Italy) is a small company established in 2012 that brings innovation into the digital identity and geospatial market of open-source based solutions. Geobeyond offers commercial support and core development on pygeoapi to build robust and affordable solutions which can scale up the authentication and authorization capabilities on client's premises. We provide managed serverless solutions on top of pygeoapi with FASTGeoAPI . GeoCat B.V. GeoCat (Netherlands/Canada) offers cutting-edge customized software and services that make publishing geospatial data on the Internet easier and more efficient. Specialized in Spatial Data Infrastructure (SDI) and geospatial data cloud solutions, GeoCat builds sustainable applications following the Free and Open Source Software (FOSS) principle and open standards, and it also is a pygeoapi contributor. GeoComvos Ltd GeoComvos Ltd. is a technical consultancy and open source geospatial service provider, specializing in the development, deployment of Free and Open Source Software Geospatial (FOSS4G) technology, particularly in the development of Spatial Data Infrastructure (SDI) platforms and Geospatial Catalogues. The company specializes in promoting, developing and contributing Open Source and Open Data solutions to governments, organizations and the private sector. GeoComvos provides support and development services for pygeoapi. Just Objects B.V. Just Objects is the trading name for the professional activities of Just van den Broecke . Just is a full-stack developer with over 25 years experience. He is a pygeoapi core developer, has developed the pygeoapi demo server , and contributes to many other open source geospatial projects. Through Just Objects he provides a range of services for Free and Open Source Software Geospatial (FOSS4G) technology, including consultancy, training, development and (DevOps) deployment. GatewayGeo GatewayGeo (Canada) is a company on the East Coast of Canada that has long specialized in assisting organizations to publish, discover and share their geospatial data through openness : OGC services, leveraging FOSS4G software. GatewayGeo is known for its longtime participation in the MapServer project, as well as being the company who gave the initial pycsw metadata publishing workshop back in 2013. GatewayGeo's popular product, MS4W , is freely available and comes pre-configured with various OGC services running out-of-the-box. Byte Road Byte Road (Portugal) is a consulting and R&D company, operating in the fields of data engineering and data analytics. We leverage open standards, free and open source software, cloud computing, software containers, SQL and NoSQL databases, to pave roads that connect users to their data assets. Byte Road develops and maintains the pygeoapi-based spatial data infrastructure (SDI) , created in the context of the eMOTIONAL Cities project . We speak Portuguese, Italian, Spanish and English. Rotten Grapes Private Limited Rotten Grapes (India) is an open-source first Geospatial company providing unique solutions for your business via our Services and Products! We are small agency of 6 developers and designers all walking down from different paths of life and sharing same purpose Helping local business leverage geospatial data ! // shuffle divs randomly // from https://stackoverflow.com/a/43980082 (2022-01-15) function shuffle() { var container = document.getElementById(\"service-provider-list\"); var elementsArray = Array.prototype.slice.call(container.getElementsByClassName(\"service-provider\")); elementsArray.forEach(function(element){ container.removeChild(element); }) shuffleArray(elementsArray); elementsArray.forEach(function(element){ container.appendChild(element); }) } function shuffleArray(array) { for (var i = array.length - 1; i > 0; i--) { var j = Math.floor(Math.random() * (i + 1)); var temp = array[i]; array[i] = array[j]; array[j] = temp; } return array; } shuffle();","title":"Service Providers"},{"location":"community/service-providers/#service-providers","text":"pygeoapi is developed and supported by a number of businesses, organizations and individuals around the world. Using a service provider is a great way to get started with pygeoapi and contributes to the ongoing sustainability of the project. Services include (but are not limited to): training setup/installation/deployment custom integration bug fixing features/enhancements core development maintenance/packaging/distribution documentation The section below provides a list of service providers who can help you in getting the best out of your pygeoapi investment. The list is randomized on each page load. If you are a service provider and would like to be listed on this page, please feel free to add yourself to the service provider list .","title":"Service Providers"},{"location":"development/","text":"Development Project Steering Committee Request for Comments (RFCs)","title":"Development"},{"location":"development/#development","text":"Project Steering Committee Request for Comments (RFCs)","title":"Development"},{"location":"development/rfc/","text":"Request for Comments (RFC) An RFC is a memorandum describing methods, behaviors, research, or innovations applicable to the working of the Internet and Internet-connected systems. It is submitted either for peer review or simply to convey new concepts, information, or (occasionally) engineering humor. An RFC describes a major change in the technological underpinnings of pygeoapi, major additions to functionality, or changes in the direction of the project. RFC1: Project Steering Committee Guidelines RFC2: Dependency policy RFC3: Architectural Decision Records RFC4: GitHub Issue and Pull Request management RFC5: Enhanced data limit handling","title":"Request for Comments"},{"location":"development/rfc/#request-for-comments-rfc","text":"An RFC is a memorandum describing methods, behaviors, research, or innovations applicable to the working of the Internet and Internet-connected systems. It is submitted either for peer review or simply to convey new concepts, information, or (occasionally) engineering humor. An RFC describes a major change in the technological underpinnings of pygeoapi, major additions to functionality, or changes in the direction of the project. RFC1: Project Steering Committee Guidelines RFC2: Dependency policy RFC3: Architectural Decision Records RFC4: GitHub Issue and Pull Request management RFC5: Enhanced data limit handling","title":"Request for Comments (RFC)"},{"location":"development/rfc/1/","text":"RFC1: Project Steering Committee Guidelines date: 2019-10-09 author: Tom Kralidis contact: tomkralidis@gmail.com status: adopted modified: 2019-10-26 Summary This RFC describes the pygeoapi Project Steering Committee (PSC) rules of engagement and decision making process for all aspects of the project. Examples of PSC responsibilities: ensuring community code of conduct setting the overall development roadmap technical standards and policies (coding conventions, etc.) ensuring a regular release schedule (major and maintenance) reviewing RFCs project infrastructure (issue tracker, source code management, hosting, etc.) formalization with external entities such as OSGeo, OGC (CITE), etc. setting project priorities In brief the project team votes on proposals on the pygeoapi mailing list . Proposals are available for review for at least two days, and a single veto is sufficient to delay progress though ultimately a majority of members can pass a proposal. Detailed Process Proposals are written and submitted to the pygeoapi mailing list for discussion and voting, by anyone Proposals need to be available for review for at least two business days before a final decision can be made RFCs can be drafted on the pygeoapi wiki, and once voted on, cast on website at https://pygeoapi.io/development/rfc/xxx Respondants may vote using the following rubric: +1: support the proposal and a willingness to support implementation -1: veto the proposal, but must provide clear reasoning and alternate approaches to resolving issues within the two days -0: mild disagreement, but has no effect 0: no opinion +0: mild support, but has no effect Anyone can comment on proposals, but only PSC member votes will be counted A proposal will be accepted if it receives +2 (including the author) and no vetoes (-1) If a proposal is vetoed, and it cannot be revised to satisfy all parties, then it can be resubmitted for an override vote in which a majority of all eligible votes indicating +1 is sufficient to pass it. Note that this is a majority of all committee members, not just those who actively vote Upon completion of discussion and voting the author should announce whether they are proceeding (proposal accepted) or are withdrawing (vetoed) The Chair gets a vote The Chair is responsible for keeping track of who is a member of the PSC. The authoritative and current PSC membership list is maintained at https://pygeoapi.io/community/psc Addition and removal of members from the PSC, including selection of a Chair should be handled as a proposal to the committee The Chair adjudicates in cases of disputes about voting When is a Vote Required? changes in committee membership significant changes to project infrastructure backward compatibility issues significant feature implementation(s) Changing the inter-subsystem API, or objects Issues of process/procedures Release management Relationships with external entities (OSGeo, OGC, etc.) Anything controversial Observations The Chair is the ultimate adjudicator if things break down The absolute majority rule can be used to override an obstructionist veto, but it is intended that in normal circumstances vetoers need to be convinced to withdraw their veto. We are trying to reach consensus It is anticipated that seperate activities will exist to manage conferences, presentations, websites, demos, etc. Committee Membership The PSC is comprised of individuals who are: technical contributors documentation and training contributors other prominent members of the pygeoapi community contributors of strategic direction to pygeoapi as an SDI component Adding Members Any member of the pygeoapi mailing list may nominate someone for committee membership at any time. Only existing PSC members may vote on new members. Nominees must receive a majority vote from existing members to be added to the PSC. Stepping Down If for some reason a PSC member is not able to fully participate then they are free to step down. If a member is not active for a period of 12 months then the committee reserves the right to seek nominations to fill that position. PSC members who have stepped down or have been replaced as certainly welcome to return upon nomincation. Membership Responsibilities Guiding Development Members should take an active role guiding the development of new features they feel passionate about. Once a change request has been accepted and given the go ahead to proceed does not mean the members are free of their obligation. PSC members voting +1 for a change request are expected to stay engaged and ensure the change is implemented and documented in a way that is most beneficial to users. Note that this applies not only to change requests that affect code, but also those that affect the website, technical infrastructure, policies and standards. Meeting Attendance PSC members are expected to participate in pre-scheduled Gitter meetings. Initial frequency is set to once a month. Mailing List Participation PSC members are expected to be active on the pygeoapi mailing list and Gitter chat. Non-developer members of the PSC are not expected to respond to coding level questions on the pygeoapi mailing list, however they are expected to provide their thoughts and opinions on user level requirements and compatibility issues when RFC discussions take place. Bootstrapping Prior to forming the PSC, this RFC must be distributed before the pygeoapi community for review and comment. Any and all substantive comments are encouraged to be discussed via the pygeoapi mailing list or Gitter channel. Tom Kralidis is declared initial Chair of the PSC. Initial PSC members are (in alphabetical order): Francesco Bartoli Just van den Broecke Paul van Genuchten Jorge Samuel Mendes de Jesus Tom Kralidis (Chair) Angelos Tzotsos Voting History Adopted on 2019-10-26 with +1 from francbartoli, justb4, pvgenuchten, jorgejesus, tomkralidis, kalxas","title":"RFC1 - Project Steering Committee Guidelines"},{"location":"development/rfc/1/#rfc1-project-steering-committee-guidelines","text":"date: 2019-10-09 author: Tom Kralidis contact: tomkralidis@gmail.com status: adopted modified: 2019-10-26","title":"RFC1: Project Steering Committee Guidelines"},{"location":"development/rfc/1/#summary","text":"This RFC describes the pygeoapi Project Steering Committee (PSC) rules of engagement and decision making process for all aspects of the project. Examples of PSC responsibilities: ensuring community code of conduct setting the overall development roadmap technical standards and policies (coding conventions, etc.) ensuring a regular release schedule (major and maintenance) reviewing RFCs project infrastructure (issue tracker, source code management, hosting, etc.) formalization with external entities such as OSGeo, OGC (CITE), etc. setting project priorities In brief the project team votes on proposals on the pygeoapi mailing list . Proposals are available for review for at least two days, and a single veto is sufficient to delay progress though ultimately a majority of members can pass a proposal.","title":"Summary"},{"location":"development/rfc/1/#detailed-process","text":"Proposals are written and submitted to the pygeoapi mailing list for discussion and voting, by anyone Proposals need to be available for review for at least two business days before a final decision can be made RFCs can be drafted on the pygeoapi wiki, and once voted on, cast on website at https://pygeoapi.io/development/rfc/xxx Respondants may vote using the following rubric: +1: support the proposal and a willingness to support implementation -1: veto the proposal, but must provide clear reasoning and alternate approaches to resolving issues within the two days -0: mild disagreement, but has no effect 0: no opinion +0: mild support, but has no effect Anyone can comment on proposals, but only PSC member votes will be counted A proposal will be accepted if it receives +2 (including the author) and no vetoes (-1) If a proposal is vetoed, and it cannot be revised to satisfy all parties, then it can be resubmitted for an override vote in which a majority of all eligible votes indicating +1 is sufficient to pass it. Note that this is a majority of all committee members, not just those who actively vote Upon completion of discussion and voting the author should announce whether they are proceeding (proposal accepted) or are withdrawing (vetoed) The Chair gets a vote The Chair is responsible for keeping track of who is a member of the PSC. The authoritative and current PSC membership list is maintained at https://pygeoapi.io/community/psc Addition and removal of members from the PSC, including selection of a Chair should be handled as a proposal to the committee The Chair adjudicates in cases of disputes about voting","title":"Detailed Process"},{"location":"development/rfc/1/#when-is-a-vote-required","text":"changes in committee membership significant changes to project infrastructure backward compatibility issues significant feature implementation(s) Changing the inter-subsystem API, or objects Issues of process/procedures Release management Relationships with external entities (OSGeo, OGC, etc.) Anything controversial","title":"When is a Vote Required?"},{"location":"development/rfc/1/#observations","text":"The Chair is the ultimate adjudicator if things break down The absolute majority rule can be used to override an obstructionist veto, but it is intended that in normal circumstances vetoers need to be convinced to withdraw their veto. We are trying to reach consensus It is anticipated that seperate activities will exist to manage conferences, presentations, websites, demos, etc.","title":"Observations"},{"location":"development/rfc/1/#committee-membership","text":"The PSC is comprised of individuals who are: technical contributors documentation and training contributors other prominent members of the pygeoapi community contributors of strategic direction to pygeoapi as an SDI component","title":"Committee Membership"},{"location":"development/rfc/1/#adding-members","text":"Any member of the pygeoapi mailing list may nominate someone for committee membership at any time. Only existing PSC members may vote on new members. Nominees must receive a majority vote from existing members to be added to the PSC.","title":"Adding Members"},{"location":"development/rfc/1/#stepping-down","text":"If for some reason a PSC member is not able to fully participate then they are free to step down. If a member is not active for a period of 12 months then the committee reserves the right to seek nominations to fill that position. PSC members who have stepped down or have been replaced as certainly welcome to return upon nomincation.","title":"Stepping Down"},{"location":"development/rfc/1/#membership-responsibilities","text":"","title":"Membership Responsibilities"},{"location":"development/rfc/1/#guiding-development","text":"Members should take an active role guiding the development of new features they feel passionate about. Once a change request has been accepted and given the go ahead to proceed does not mean the members are free of their obligation. PSC members voting +1 for a change request are expected to stay engaged and ensure the change is implemented and documented in a way that is most beneficial to users. Note that this applies not only to change requests that affect code, but also those that affect the website, technical infrastructure, policies and standards.","title":"Guiding Development"},{"location":"development/rfc/1/#meeting-attendance","text":"PSC members are expected to participate in pre-scheduled Gitter meetings. Initial frequency is set to once a month.","title":"Meeting Attendance"},{"location":"development/rfc/1/#mailing-list-participation","text":"PSC members are expected to be active on the pygeoapi mailing list and Gitter chat. Non-developer members of the PSC are not expected to respond to coding level questions on the pygeoapi mailing list, however they are expected to provide their thoughts and opinions on user level requirements and compatibility issues when RFC discussions take place.","title":"Mailing List Participation"},{"location":"development/rfc/1/#bootstrapping","text":"Prior to forming the PSC, this RFC must be distributed before the pygeoapi community for review and comment. Any and all substantive comments are encouraged to be discussed via the pygeoapi mailing list or Gitter channel. Tom Kralidis is declared initial Chair of the PSC. Initial PSC members are (in alphabetical order): Francesco Bartoli Just van den Broecke Paul van Genuchten Jorge Samuel Mendes de Jesus Tom Kralidis (Chair) Angelos Tzotsos","title":"Bootstrapping"},{"location":"development/rfc/1/#voting-history","text":"Adopted on 2019-10-26 with +1 from francbartoli, justb4, pvgenuchten, jorgejesus, tomkralidis, kalxas","title":"Voting History"},{"location":"development/rfc/2/","text":"RFC2: Dependency policy date: 2023-11-10 author: Tom Kralidis contact: tomkralidis@gmail.com status: draft modified: 2024-01-06 Summary This RFC outlines pygeoapi policy on upstream dependency management, development and stable branch workflow. Background Having started in 2018 , a core goal of pygeoapi was to develop and provide an OGC API server that is light on core dependencies. Since then, the project has experienced considerable success in the number of features implemented and standards supported. A reality of the aforementioned has been the addition of numerous dependencies that have impacted the codebase on various operating systems and environments. pygeoapi is currently provided for the below: UbuntuGIS pip3 Docker Conda FreeBSD Operating systems and build systems are managed on schedules and timelines that are driven by project requirements. As a result, various differences in dependencies and requirements arise. This is especially evident when adding features based on new packages that are available on some environments but not others. Given the above, it is critical that pygeoapi establish a dependency policy in order to manage development. Dependency policy Stable branch On a major or minor release, pygeoapi will implement a stable branch which is pinned to the dependencies at the time of release against master. In particular for a given dependency version such rules shall be met: the dependency must not have known high or critical vulnerabilities the Python dependency must have a corresponding operating system package for the supported Ubuntu version at the time As a result, stable branch shall only rely upon those libraries (and respective versions) which can be found on the above given OS baseline repositories. At the same time, the Docker image built with all the dependencies from stable branch must not have known high or critical vulnerabilities. master branch master branch dependencies and requirements shall be possibly consistent against a given operating system baseline: pip3 requirements Ubuntu dependencies (nice to have but not mandatory, see below for fixes) Docker / Docker Compose Fixes will be made and backported to stable branches as required. For security fixes, stable branch dependencies shall be updated as required. Adding/Removing (new) dependencies Careful consideration shall be given when new dependencies are proposed. New dependencies represent long term commitment and maintenance to dependency management and stability of pygeoapi. Any new dependency that does not have a corresponding Debian or Ubuntu package shall be fixed as soon as possible and the missing package made available via Ubuntu within 120 days (4 months) . If the dependency is not made available to the given distributions in the approved timeline, the developer who introduced the dependency is responsible for removing/reverting/replacing the dependency and the associated code in the codebase. The pygeoapi PSC reserves the right to remove/revert/replace the dependency and its associated code. Changes (Pull Requests) which add or remove dependencies shall be discussed and have a minimum of two approvals from the PSC . Bootstrapping To bootstrap this RFC, the following baseline is proposed: master branch shall be compatible to dependences available on Ubuntu 22.04 Voting History Adopted on 2024-01-06 with +1 from francbartoli, justb4, pvgenuchten, jorgejesus, tomkralidis, kalxas","title":"RFC2 - Dependency policy"},{"location":"development/rfc/2/#rfc2-dependency-policy","text":"date: 2023-11-10 author: Tom Kralidis contact: tomkralidis@gmail.com status: draft modified: 2024-01-06","title":"RFC2: Dependency policy"},{"location":"development/rfc/2/#summary","text":"This RFC outlines pygeoapi policy on upstream dependency management, development and stable branch workflow.","title":"Summary"},{"location":"development/rfc/2/#background","text":"Having started in 2018 , a core goal of pygeoapi was to develop and provide an OGC API server that is light on core dependencies. Since then, the project has experienced considerable success in the number of features implemented and standards supported. A reality of the aforementioned has been the addition of numerous dependencies that have impacted the codebase on various operating systems and environments. pygeoapi is currently provided for the below: UbuntuGIS pip3 Docker Conda FreeBSD Operating systems and build systems are managed on schedules and timelines that are driven by project requirements. As a result, various differences in dependencies and requirements arise. This is especially evident when adding features based on new packages that are available on some environments but not others. Given the above, it is critical that pygeoapi establish a dependency policy in order to manage development.","title":"Background"},{"location":"development/rfc/2/#dependency-policy","text":"","title":"Dependency policy"},{"location":"development/rfc/2/#stable-branch","text":"On a major or minor release, pygeoapi will implement a stable branch which is pinned to the dependencies at the time of release against master. In particular for a given dependency version such rules shall be met: the dependency must not have known high or critical vulnerabilities the Python dependency must have a corresponding operating system package for the supported Ubuntu version at the time As a result, stable branch shall only rely upon those libraries (and respective versions) which can be found on the above given OS baseline repositories. At the same time, the Docker image built with all the dependencies from stable branch must not have known high or critical vulnerabilities.","title":"Stable branch"},{"location":"development/rfc/2/#master-branch","text":"master branch dependencies and requirements shall be possibly consistent against a given operating system baseline: pip3 requirements Ubuntu dependencies (nice to have but not mandatory, see below for fixes) Docker / Docker Compose Fixes will be made and backported to stable branches as required. For security fixes, stable branch dependencies shall be updated as required.","title":"master branch"},{"location":"development/rfc/2/#addingremoving-new-dependencies","text":"Careful consideration shall be given when new dependencies are proposed. New dependencies represent long term commitment and maintenance to dependency management and stability of pygeoapi. Any new dependency that does not have a corresponding Debian or Ubuntu package shall be fixed as soon as possible and the missing package made available via Ubuntu within 120 days (4 months) . If the dependency is not made available to the given distributions in the approved timeline, the developer who introduced the dependency is responsible for removing/reverting/replacing the dependency and the associated code in the codebase. The pygeoapi PSC reserves the right to remove/revert/replace the dependency and its associated code. Changes (Pull Requests) which add or remove dependencies shall be discussed and have a minimum of two approvals from the PSC .","title":"Adding/Removing (new) dependencies"},{"location":"development/rfc/2/#bootstrapping","text":"To bootstrap this RFC, the following baseline is proposed: master branch shall be compatible to dependences available on Ubuntu 22.04","title":"Bootstrapping"},{"location":"development/rfc/2/#voting-history","text":"Adopted on 2024-01-06 with +1 from francbartoli, justb4, pvgenuchten, jorgejesus, tomkralidis, kalxas","title":"Voting History"},{"location":"development/rfc/3/","text":"RFC3: Architecture Decision Records date: 2024-02-17 author: Francesco Bartoli contact: xbartolone@gmail.com status: draft modified: 2024-02-17 Summary Adoption of Architectural Decision Record (ADR) methodology as best practice Background As the pygeoapi project evolves and scales, it becomes increasingly important to establish clear documentation and communication channels regarding architectural decisions. Currently, the pygeoapi project lacks a standardized method for documenting architectural decisions. This lowers the ability of contributors, maintainers, and stakeholders to understand the reasoning behind certain design choices and may lead to misunderstandings or inefficiencies during the development process. At the moment architectural decisions are fragmented and hidden in the discussions of the issues/PRs themself. This RFC proposes the adoption of Architectural Decision Records (ADRs) as a best practice within the pygeoapi project. It serves as a starting point for discussing the feasibility and implications of adopting ADRs within the pygeoapi project. Feedback and contributions from the community are welcomed and encouraged to help shape the proposed implementation plan and ensure its successful adoption. Architectural Decision Records (ADRs) One approach gaining traction in the software development community is the use of Architectural Decision Records (ADRs). ADRs provide a structured way to capture important architectural decisions, their contexts, and the rationale behind them, thereby promoting transparency and aiding in future decision-making processes. They will be available as a markdown files under the documentation folder and eventually made published and searchable as web pages. An ADR may or may not be linked to a pull request but when there is a particular focus/impact on the design of the pygeoapi architecture then it can be required (if missing) as part of the review process to converge toward an architectural change with a documented and clear consensus/rejection. By adopting ADRs as a best practice, the pygeoapi project can enhance its architectural governance processes, foster collaboration among contributors, and ultimately deliver more robust and maintainable software solutions. By formally documenting key architectural decisions, we aim to achieve the following benefits: Transparency : ADRs provide transparency into the thought process behind architectural decisions, allowing contributors and stakeholders tounderstand the rationale and implications of various design choices. Consistency : A standardized format for documenting architectural decisions promotes consistency across the project, making it easier for new contributors to understand the project's architecture and guiding future decision-making processes. Knowledge Sharing : ADRs serve as a valuable knowledge-sharing tool, capturing the collective wisdom and experience of the project's contributors and enabling knowledge transfer across team members. Risk Mitigation : Documenting architectural decisions helps mitigate the risk of future misunderstandings or disputes by providing a clear record of the rationale behind each decision. Implementation Plan To adopt ADRs as a best practice within the pygeoapi project, the following steps are proposed. Education and Awareness Raise awareness among contributors, maintainers, and stakeholders about the benefits of ADRs and the proposed adoption process. Establishment of Guidelines Define clear guidelines for creating, maintaining, and organizing ADRs within the project repository. Integration with Development Workflow Integrate the creation and review of ADRs into the project's development workflow to ensure that important architectural decisions are documented in a timely manner. Documentation Update the project's documentation to include information on ADRs, their purpose, and how they should be used within the context of the pygeoapi project. Community Engagement Encourage community participation in the creation and review of ADRs to ensure that a diverse range of perspectives is considered in the decision-making process. Voting History To be started.","title":"RFC3 - Architectural Decision Records"},{"location":"development/rfc/3/#rfc3-architecture-decision-records","text":"date: 2024-02-17 author: Francesco Bartoli contact: xbartolone@gmail.com status: draft modified: 2024-02-17","title":"RFC3: Architecture Decision Records"},{"location":"development/rfc/3/#summary","text":"Adoption of Architectural Decision Record (ADR) methodology as best practice","title":"Summary"},{"location":"development/rfc/3/#background","text":"As the pygeoapi project evolves and scales, it becomes increasingly important to establish clear documentation and communication channels regarding architectural decisions. Currently, the pygeoapi project lacks a standardized method for documenting architectural decisions. This lowers the ability of contributors, maintainers, and stakeholders to understand the reasoning behind certain design choices and may lead to misunderstandings or inefficiencies during the development process. At the moment architectural decisions are fragmented and hidden in the discussions of the issues/PRs themself. This RFC proposes the adoption of Architectural Decision Records (ADRs) as a best practice within the pygeoapi project. It serves as a starting point for discussing the feasibility and implications of adopting ADRs within the pygeoapi project. Feedback and contributions from the community are welcomed and encouraged to help shape the proposed implementation plan and ensure its successful adoption.","title":"Background"},{"location":"development/rfc/3/#architectural-decision-records-adrs","text":"One approach gaining traction in the software development community is the use of Architectural Decision Records (ADRs). ADRs provide a structured way to capture important architectural decisions, their contexts, and the rationale behind them, thereby promoting transparency and aiding in future decision-making processes. They will be available as a markdown files under the documentation folder and eventually made published and searchable as web pages. An ADR may or may not be linked to a pull request but when there is a particular focus/impact on the design of the pygeoapi architecture then it can be required (if missing) as part of the review process to converge toward an architectural change with a documented and clear consensus/rejection. By adopting ADRs as a best practice, the pygeoapi project can enhance its architectural governance processes, foster collaboration among contributors, and ultimately deliver more robust and maintainable software solutions. By formally documenting key architectural decisions, we aim to achieve the following benefits: Transparency : ADRs provide transparency into the thought process behind architectural decisions, allowing contributors and stakeholders tounderstand the rationale and implications of various design choices. Consistency : A standardized format for documenting architectural decisions promotes consistency across the project, making it easier for new contributors to understand the project's architecture and guiding future decision-making processes. Knowledge Sharing : ADRs serve as a valuable knowledge-sharing tool, capturing the collective wisdom and experience of the project's contributors and enabling knowledge transfer across team members. Risk Mitigation : Documenting architectural decisions helps mitigate the risk of future misunderstandings or disputes by providing a clear record of the rationale behind each decision.","title":"Architectural Decision Records (ADRs)"},{"location":"development/rfc/3/#implementation-plan","text":"To adopt ADRs as a best practice within the pygeoapi project, the following steps are proposed.","title":"Implementation Plan"},{"location":"development/rfc/3/#education-and-awareness","text":"Raise awareness among contributors, maintainers, and stakeholders about the benefits of ADRs and the proposed adoption process.","title":"Education and Awareness"},{"location":"development/rfc/3/#establishment-of-guidelines","text":"Define clear guidelines for creating, maintaining, and organizing ADRs within the project repository.","title":"Establishment of Guidelines"},{"location":"development/rfc/3/#integration-with-development-workflow","text":"Integrate the creation and review of ADRs into the project's development workflow to ensure that important architectural decisions are documented in a timely manner.","title":"Integration with Development Workflow"},{"location":"development/rfc/3/#documentation","text":"Update the project's documentation to include information on ADRs, their purpose, and how they should be used within the context of the pygeoapi project.","title":"Documentation"},{"location":"development/rfc/3/#community-engagement","text":"Encourage community participation in the creation and review of ADRs to ensure that a diverse range of perspectives is considered in the decision-making process.","title":"Community Engagement"},{"location":"development/rfc/3/#voting-history","text":"To be started.","title":"Voting History"},{"location":"development/rfc/4/","text":"RFC4 - GitHub Issue and Pull Request management date: 2024-03-01 author: Tom Kralidis contact: tomkralidis@gmail.com status: draft modified: 2024-03-07 Summary This RFC describes the policies and procedures for handling pygeoapi GitHub Issues and Pull Requests (PRs). Issue and PR management From a software management perspective, the pygeoapi project is managed on GitHub, which includes the following: source code / version control (software, documentation) Issues (bugs, feature enhancements, etc), milestones and triage Pull Requests wiki milestones Given the free and open-source nature and spirit of the project, contributions are enabled and encouraged. To efficiently manage the above elements in the context of the pygeoapi PSC, committers and collaborators, it is proposed to put forth clear principles for handling GitHub contributions. Key principles contributions to (new features, bugs, documentation, testing) are encouraged and greatly appreciated non-trivial contributions in the form of Pull Requests are best put forth in the context of an Issue, so that discussion can take place to identify any possible concerns or impacts pygeoapi PSC, committers and collaborators are able to triage and collaborate on Issues and Pull Requests in a timely fashion over time, it is normal that Issues may be without activity for any given reason Implementation To efficiently manage pygeoapi Issues and Pull Requests and to maintain a healthy and sustainable enviroment for pygeoapi PSC, committers and collaborators, the following implementation is proposed: all Issues and Pull Requests shall be at least addressed (triaged or commented on) within ten (10) business days (assuming working days Monday - Friday) Issues or Pull Requests with more than ninety (90) days of inactivity shall receive an automated update to the Issue with a warning that the Issue or Pull Request will be automatically closed in 7 days Issues with a label of blocker shall not be closed under any circumstance automated updates shall be run on a weekly basis GitHub Issue Templates shall be updated as follows: reminding the submitter that the Issue or Pull Request is subject to the above policies and procedures encouraging and guiding the submitter that a given Pull Request should be based on an Issue Voting History Adopted on 2024-03-07 with +1 from francbartoli, justb4, pvgenuchten, jorgejesus, tomkralidis, kalxas","title":"RFC4 - GitHub Issue and Pull Request management"},{"location":"development/rfc/4/#rfc4-github-issue-and-pull-request-management","text":"date: 2024-03-01 author: Tom Kralidis contact: tomkralidis@gmail.com status: draft modified: 2024-03-07","title":"RFC4 - GitHub Issue and Pull Request management"},{"location":"development/rfc/4/#summary","text":"This RFC describes the policies and procedures for handling pygeoapi GitHub Issues and Pull Requests (PRs).","title":"Summary"},{"location":"development/rfc/4/#issue-and-pr-management","text":"From a software management perspective, the pygeoapi project is managed on GitHub, which includes the following: source code / version control (software, documentation) Issues (bugs, feature enhancements, etc), milestones and triage Pull Requests wiki milestones Given the free and open-source nature and spirit of the project, contributions are enabled and encouraged. To efficiently manage the above elements in the context of the pygeoapi PSC, committers and collaborators, it is proposed to put forth clear principles for handling GitHub contributions.","title":"Issue and PR management"},{"location":"development/rfc/4/#key-principles","text":"contributions to (new features, bugs, documentation, testing) are encouraged and greatly appreciated non-trivial contributions in the form of Pull Requests are best put forth in the context of an Issue, so that discussion can take place to identify any possible concerns or impacts pygeoapi PSC, committers and collaborators are able to triage and collaborate on Issues and Pull Requests in a timely fashion over time, it is normal that Issues may be without activity for any given reason","title":"Key principles"},{"location":"development/rfc/4/#implementation","text":"To efficiently manage pygeoapi Issues and Pull Requests and to maintain a healthy and sustainable enviroment for pygeoapi PSC, committers and collaborators, the following implementation is proposed: all Issues and Pull Requests shall be at least addressed (triaged or commented on) within ten (10) business days (assuming working days Monday - Friday) Issues or Pull Requests with more than ninety (90) days of inactivity shall receive an automated update to the Issue with a warning that the Issue or Pull Request will be automatically closed in 7 days Issues with a label of blocker shall not be closed under any circumstance automated updates shall be run on a weekly basis GitHub Issue Templates shall be updated as follows: reminding the submitter that the Issue or Pull Request is subject to the above policies and procedures encouraging and guiding the submitter that a given Pull Request should be based on an Issue","title":"Implementation"},{"location":"development/rfc/4/#voting-history","text":"Adopted on 2024-03-07 with +1 from francbartoli, justb4, pvgenuchten, jorgejesus, tomkralidis, kalxas","title":"Voting History"},{"location":"development/rfc/5/","text":"RFC5 - Enhanced data limit handling date: 2024-11-19 author: Tom Kralidis contact: tomkralidis@gmail.com status: draft modified: 2025-01-23 Overview This RFC describes enhanced limit handling implementation in support of better definition and control on data query limiting. Currently, pygeoapi defines a server.limit configuration directive which corresponds to the limit query parameter as part of the OGC API - Features and OGC API - Records .../items endpoint. The following scenarios are missing from this setting: the ability for the server to provide a default limit when the user does not explicitly specify a limit the ability for the server to provide a maximum limit when the user specifies a limit that is deemed too large by the server to process given this setting is defined at the server level, it may not be suitable for all datasets in a given configuration limits currently only apply to vector data Proposed solution pygeoapi will define a limits configuration parameter that will allow a user to define default and maximum limits for multiple data types. This parameter will be defined at the server level ( server.limits ) with the ability to override at resource level ( resources[*].limits ). An example of this setting is shown below: limits: default_items: 20 # applies to vector data max_items: 500 # applies to vector data max_distance_x: 123 # applies to all datasets max_distance_y: 456 # applies to all datasets max_distance_units: m # as per UCUM https://ucum.org/ucum#section-Tables-of-Terminal-Symbols on_exceed: error # one of error, throttle The limits setting will be applied as follows: pygeoapi administrator is able to use at both the server and resources levels, with resources limits overriding server wide limits settings no limit specified by client: use limits.default_items to set the result set size limit specified by client: calculate the minimum of the query parameter and limits.max_items to set the result set size bbox or spatial dimensions: compare distance of request to maximum definition allowed in limits.max_distance_x and limits.max_distance_y Implementation an evaluate_limit function will be added to the pygeoapi module for use by pygeoapi.api accordingly if limits.on_exceed is error , then pygeoapi will throw HTTP 413 Backwards Compatibility Issues The limits setting fully replaces server.limit and represents a compatibility break. The new functionality will not be backported to other branches. Testing Tests will be added to ensure the expected functionality. Documentation Documentation will be added to the configuration description page. Issue and Pull Request tracking Issue: https://github.com/geopython/pygeoapi/issues/1856 Pull Request: https://github.com/geopython/pygeoapi/pull/1892 Voting History Adopted on 2025-01-23 with +1 from kalxas, jorgejesus, justb4, tomkralidis","title":"RFC5 - Enhanced data limit handling"},{"location":"development/rfc/5/#rfc5-enhanced-data-limit-handling","text":"date: 2024-11-19 author: Tom Kralidis contact: tomkralidis@gmail.com status: draft modified: 2025-01-23","title":"RFC5 - Enhanced data limit handling"},{"location":"development/rfc/5/#overview","text":"This RFC describes enhanced limit handling implementation in support of better definition and control on data query limiting. Currently, pygeoapi defines a server.limit configuration directive which corresponds to the limit query parameter as part of the OGC API - Features and OGC API - Records .../items endpoint. The following scenarios are missing from this setting: the ability for the server to provide a default limit when the user does not explicitly specify a limit the ability for the server to provide a maximum limit when the user specifies a limit that is deemed too large by the server to process given this setting is defined at the server level, it may not be suitable for all datasets in a given configuration limits currently only apply to vector data","title":"Overview"},{"location":"development/rfc/5/#proposed-solution","text":"pygeoapi will define a limits configuration parameter that will allow a user to define default and maximum limits for multiple data types. This parameter will be defined at the server level ( server.limits ) with the ability to override at resource level ( resources[*].limits ). An example of this setting is shown below: limits: default_items: 20 # applies to vector data max_items: 500 # applies to vector data max_distance_x: 123 # applies to all datasets max_distance_y: 456 # applies to all datasets max_distance_units: m # as per UCUM https://ucum.org/ucum#section-Tables-of-Terminal-Symbols on_exceed: error # one of error, throttle The limits setting will be applied as follows: pygeoapi administrator is able to use at both the server and resources levels, with resources limits overriding server wide limits settings no limit specified by client: use limits.default_items to set the result set size limit specified by client: calculate the minimum of the query parameter and limits.max_items to set the result set size bbox or spatial dimensions: compare distance of request to maximum definition allowed in limits.max_distance_x and limits.max_distance_y","title":"Proposed solution"},{"location":"development/rfc/5/#implementation","text":"an evaluate_limit function will be added to the pygeoapi module for use by pygeoapi.api accordingly if limits.on_exceed is error , then pygeoapi will throw HTTP 413","title":"Implementation"},{"location":"development/rfc/5/#backwards-compatibility-issues","text":"The limits setting fully replaces server.limit and represents a compatibility break. The new functionality will not be backported to other branches.","title":"Backwards Compatibility Issues"},{"location":"development/rfc/5/#testing","text":"Tests will be added to ensure the expected functionality.","title":"Testing"},{"location":"development/rfc/5/#documentation","text":"Documentation will be added to the configuration description page.","title":"Documentation"},{"location":"development/rfc/5/#issue-and-pull-request-tracking","text":"Issue: https://github.com/geopython/pygeoapi/issues/1856 Pull Request: https://github.com/geopython/pygeoapi/pull/1892","title":"Issue and Pull Request tracking"},{"location":"development/rfc/5/#voting-history","text":"Adopted on 2025-01-23 with +1 from kalxas, jorgejesus, justb4, tomkralidis","title":"Voting History"},{"location":"logo/","text":"pygeoapi logo The pygeoapi logo was created on August 21, 2019 on https://www.freelogodesign.org by justb4 . The design files can be found in the subdirs below. Usable logo files can be found under img . As that dir is in gh-pages which is CNAMEd to https://pygeoapi.io, pygeoapi logos and icons can be linked directly without a need for copying: e.g. https://pygeoapi.io/img/pygeoapi-logo.png or without transparency: https://pygeoapi.io/img/pygeoapi-logo-notrans.png. Result Logo Icon Design In theory it is possible to recreate the logo, or a color-variant, but the freelogodesign.org session is one-time (with payment) only. Below a screenshot of the design session. Within this session one can mix icons and texts, hundreds of icons are available (via search) The logo was created as follows: provide text, choose domain \"Technology\" ignore all suggestions, start a fresh logo with just text text: \"pygeoapi\", selected the RoboSlab Regular Font icon 1: search for a cog or cogwheel icon (there are hundreds available) until you find one without a circle internally icon 2: search for a marker icon place the marker icon within the cogwheel icon colors: blue is \"Python logo blue\": hex #306998 and \"black\" is grayish: #3a3a3a . ensure result has transparency saved and paid EUR 34,-, received .zip file with designs SVGs various resolutions shortly after that NB the square pygeoapi icon was cut off manually (in Preview Mac) also favicons need to be created manually","title":"pygeoapi logo"},{"location":"logo/#pygeoapi-logo","text":"The pygeoapi logo was created on August 21, 2019 on https://www.freelogodesign.org by justb4 . The design files can be found in the subdirs below. Usable logo files can be found under img . As that dir is in gh-pages which is CNAMEd to https://pygeoapi.io, pygeoapi logos and icons can be linked directly without a need for copying: e.g. https://pygeoapi.io/img/pygeoapi-logo.png or without transparency: https://pygeoapi.io/img/pygeoapi-logo-notrans.png.","title":"pygeoapi logo"},{"location":"logo/#result","text":"","title":"Result"},{"location":"logo/#logo","text":"","title":"Logo"},{"location":"logo/#icon","text":"","title":"Icon"},{"location":"logo/#design","text":"In theory it is possible to recreate the logo, or a color-variant, but the freelogodesign.org session is one-time (with payment) only. Below a screenshot of the design session. Within this session one can mix icons and texts, hundreds of icons are available (via search) The logo was created as follows: provide text, choose domain \"Technology\" ignore all suggestions, start a fresh logo with just text text: \"pygeoapi\", selected the RoboSlab Regular Font icon 1: search for a cog or cogwheel icon (there are hundreds available) until you find one without a circle internally icon 2: search for a marker icon place the marker icon within the cogwheel icon colors: blue is \"Python logo blue\": hex #306998 and \"black\" is grayish: #3a3a3a . ensure result has transparency saved and paid EUR 34,-, received .zip file with designs SVGs various resolutions shortly after that NB the square pygeoapi icon was cut off manually (in Preview Mac) also favicons need to be created manually","title":"Design"},{"location":"presentations/","text":"Presentations FOSS4G Europe 2025 presentation FOSS4G 2024 presentation FOSS4G Europe 2024 presentation FOSS4G 2023 presentation Podcast: pygeoapi \u2013 A Python Geospatial Server (May 2023) CRS, INSPIRE, ADR Additions for Geonovum Tender 2023 OGC Stack Winter School 2022 presentation FedGeoDay2022 presentation FOSS4G 2022 presentation Elastic Community Conference 2022 presentation FOSS4G 2021 presentation Slides: Default - Latest Slides: 2018 Videos GISE Winter School on OGC Stack (2023) Presentation at FOSSGIS 2024 Presentation at GeoPython 2020 Presentation at FOSS4G 2019 Installing pygeoapi from GitHub Installing pygeoapi from Docker Server Configuration of pygeoapi Logging in pygeoapi Metadata in pygeoapi Resources configuration in pygeoapi Uploading CSV to pygeoapi pygeoapi installation for Windows How to implement OGC API - Features by using pygeoapi Implementing OGC API - Processes with prefect and pygeoapi","title":"Presentations"},{"location":"presentations/#presentations","text":"FOSS4G Europe 2025 presentation FOSS4G 2024 presentation FOSS4G Europe 2024 presentation FOSS4G 2023 presentation Podcast: pygeoapi \u2013 A Python Geospatial Server (May 2023) CRS, INSPIRE, ADR Additions for Geonovum Tender 2023 OGC Stack Winter School 2022 presentation FedGeoDay2022 presentation FOSS4G 2022 presentation Elastic Community Conference 2022 presentation FOSS4G 2021 presentation Slides: Default - Latest Slides: 2018","title":"Presentations"},{"location":"presentations/#videos","text":"GISE Winter School on OGC Stack (2023) Presentation at FOSSGIS 2024 Presentation at GeoPython 2020 Presentation at FOSS4G 2019 Installing pygeoapi from GitHub Installing pygeoapi from Docker Server Configuration of pygeoapi Logging in pygeoapi Metadata in pygeoapi Resources configuration in pygeoapi Uploading CSV to pygeoapi pygeoapi installation for Windows How to implement OGC API - Features by using pygeoapi Implementing OGC API - Processes with prefect and pygeoapi","title":"Videos"},{"location":"presentations/2018/css/theme/","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Index"},{"location":"presentations/2018/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"presentations/2018/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"presentations/2018/plugin/markdown/example/","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"presentations/2018/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"presentations/2018/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"presentations/2018/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"presentations/2018/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"presentations/2018/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"presentations/2018/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"presentations/2018/plugin/markdown/example/#external-33","text":"","title":"External 3.3"},{"location":"presentations/default/css/theme/","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Index"},{"location":"presentations/default/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"presentations/default/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"presentations/default/plugin/markdown/example/","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"presentations/default/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"presentations/default/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"presentations/default/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"presentations/default/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"presentations/default/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"presentations/default/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"presentations/default/plugin/markdown/example/#external-33","text":"","title":"External 3.3"},{"location":"presentations/geonovum-tender-2023/css/theme/","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Index"},{"location":"presentations/geonovum-tender-2023/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"presentations/geonovum-tender-2023/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"presentations/geonovum-tender-2023/plugin/markdown/example/","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"presentations/geonovum-tender-2023/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"presentations/geonovum-tender-2023/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"presentations/geonovum-tender-2023/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"presentations/geonovum-tender-2023/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"presentations/geonovum-tender-2023/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"presentations/geonovum-tender-2023/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"presentations/geonovum-tender-2023/plugin/markdown/example/#external-33","text":"","title":"External 3.3"},{"location":"presentations/ogc-stack-winter-school-2022/css/theme/","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Index"},{"location":"presentations/ogc-stack-winter-school-2022/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"presentations/ogc-stack-winter-school-2022/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"presentations/ogc-stack-winter-school-2022/plugin/markdown/example/","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"presentations/ogc-stack-winter-school-2022/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"presentations/ogc-stack-winter-school-2022/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"presentations/ogc-stack-winter-school-2022/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"presentations/ogc-stack-winter-school-2022/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"presentations/ogc-stack-winter-school-2022/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"presentations/ogc-stack-winter-school-2022/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"presentations/ogc-stack-winter-school-2022/plugin/markdown/example/#external-33","text":"","title":"External 3.3"}]}